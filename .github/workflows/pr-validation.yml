name: PR Validation

on:
  pull_request:
  merge_group:

permissions:
  contents: read

jobs:
  file-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup reviewdog
        uses: reviewdog/action-setup@v1.3.0
        with:
          reviewdog_version: latest

      - name: Check Trailing Whitespace
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          echo '::group::Checking for trailing whitespace...'
          git ls-files |
          grep -v '^(vendor/|third_party/|templates/)' |
          xargs grep -nE " +$" |
          reviewdog -efm="%f:%l:%m" \
                -name="trailing whitespace" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-level="error" \
                -level="error"
          echo '::endgroup::'

      - name: Check EOF newline
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ github.token }}
        run: |
          set -e
          pushd "${GITHUB_WORKSPACE}/" || exit 1
          echo '::group::Checking for EOF newlines...'
          LINT_FILES=$(git ls-files | grep -Ev '^(vendor/|third_party/|templates/)')
          for file in $LINT_FILES; do
            if [[ -f $file && ! ( -s "$file" && -z "$(tail -c 1 $file)" ) ]]; then
              echo "$file:$((1 + $(wc -l $file | cut -d' ' -f 1))): Missing newline"
            fi
          done |
          reviewdog -efm="%f:%l: %m" \
                -name="EOF Newline" \
                -reporter="github-pr-check" \
                -filter-mode="added" \
                -fail-level="error" \
                -level="error"
          echo '::endgroup::'
          popd

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=10m --out-format=colored-line-number
          
      - name: Run golangci-lint
        run: make lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true
          
      - name: Install dependencies
        run: go mod download
        
      - name: Run tests
        run: make test

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          file: cover.out
          fail_ci_if_error: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Check for uncommitted changes
        run: |
          if [[ $(git status --porcelain) ]]; then
            git diff
            echo '::error::Uncommitted changes detected after running tests'
            exit 1
          fi

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build
        run: make build

      - name: Build Docker image
        run: make docker-build IMG=controller:${{ github.sha }}